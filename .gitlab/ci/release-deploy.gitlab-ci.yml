is-latest:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - echo "IS_LATEST=false" > latest.env
    - LATEST_GIT_TAG=$(git -c versionsort.prereleaseSuffix="-rc" -c versionsort.prereleaseSuffix="-RC" tag -l "v*.*.*" --sort=-v:refname | awk '!/rc/' | head -n 1)
    - if [ "$CI_COMMIT_TAG" = "$LATEST_GIT_TAG" ]; then echo "IS_LATEST=true" > latest.env; fi
    - echo "commit tag is $CI_COMMIT_TAG - latest git tag is $LATEST_GIT_TAG"
  artifacts:
    reports:
      dotenv: latest.env

.docker-push:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - echo "pushing to $DESTINATION"
    - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"auth\":\"$DOCKER_AUTH_CODE\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/dockerfile $DESTINATION

docker-push-tag:
  extends: .docker-push
  rules:
    - if: '$CI_COMMIT_TAG'
  needs:
    - job: is-latest
      artifacts: true
  variables:
    DESTINATION: --destination $CONTAINER_IMAGE_NAME:$CI_COMMIT_TAG
  before_script:
    - echo $IS_LATEST
    - if [ "$IS_LATEST" = "true" ]; then export DESTINATION="$DESTINATION --destination $CONTAINER_IMAGE_NAME:latest"; fi

# release-job:
#   stage: release
#   rules:
#     - if: '$CI_COMMIT_TAG'
#   image: registry.gitlab.com/gitlab-org/release-cli:latest
#   script:
#     - echo "Creating a release for $CI_COMMIT_TAG"
#   release:
#     tag_name: '$CI_COMMIT_TAG'
#     name: 'Release $CI_COMMIT_TAG'
#     description: 'Release created'

# deploy-job:
#   stage: deploy
#   image: alpine:3.18
#   rules:
#     - if: '$CI_COMMIT_TAG'
#   needs:
#     - docker-push-tag
#   before_script:
#     - apk update && apk add --no-cache bash gettext openssh-client
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh && chmod 700 ~/.ssh
#     - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
#     - echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config
#   script:
#     - ssh ${DEV_USER}@${DEV_HOST} "mkdir -p /tmp/${CI_PROJECT_DIR}/frontend/"
#     - scp ./deploy/front.conf ${DEV_USER}@${DEV_HOST}:/tmp/${CI_PROJECT_DIR}/frontend/default.conf
#     - scp ./docker-compose.yml ${DEV_USER}@${DEV_HOST}:/tmp/${CI_PROJECT_DIR}/docker-compose.yml
#     - envsubst < ./deploy/deploy.sh| ssh ${DEV_USER}@${DEV_HOST}

deploy:
  stage: deploy
  image: docker:24.0.7-alpine3.19
  rules:
    - if: '$CI_COMMIT_TAG'
  needs:
    - docker-push-tag
  before_script:
    - apk add docker-cli-compose openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config
    - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
  script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_TOKEN
    - docker --context remote compose up -d --pull "always" --force-recreate
